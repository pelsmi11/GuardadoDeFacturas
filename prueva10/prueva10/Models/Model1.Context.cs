//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace prueva10.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_LazaroEntities : DbContext
    {
        public DB_LazaroEntities()
            : base("name=DB_LazaroEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual ObjectResult<LoginUsuario_Result> LoginUsuario(string correo, string contrasenia)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraseniaParameter = contrasenia != null ?
                new ObjectParameter("contrasenia", contrasenia) :
                new ObjectParameter("contrasenia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUsuario_Result>("LoginUsuario", correoParameter, contraseniaParameter);
        }
    
        public virtual int spAgregaFactura(Nullable<int> factura_NitProveedor, string factura_NombreProveedor, string factura_Categoria, Nullable<System.DateTime> factura_Fecha, string factura_TipoMoneda, Nullable<double> factra_MontoTotal)
        {
            var factura_NitProveedorParameter = factura_NitProveedor.HasValue ?
                new ObjectParameter("Factura_NitProveedor", factura_NitProveedor) :
                new ObjectParameter("Factura_NitProveedor", typeof(int));
    
            var factura_NombreProveedorParameter = factura_NombreProveedor != null ?
                new ObjectParameter("Factura_NombreProveedor", factura_NombreProveedor) :
                new ObjectParameter("Factura_NombreProveedor", typeof(string));
    
            var factura_CategoriaParameter = factura_Categoria != null ?
                new ObjectParameter("Factura_Categoria", factura_Categoria) :
                new ObjectParameter("Factura_Categoria", typeof(string));
    
            var factura_FechaParameter = factura_Fecha.HasValue ?
                new ObjectParameter("Factura_Fecha", factura_Fecha) :
                new ObjectParameter("Factura_Fecha", typeof(System.DateTime));
    
            var factura_TipoMonedaParameter = factura_TipoMoneda != null ?
                new ObjectParameter("Factura_TipoMoneda", factura_TipoMoneda) :
                new ObjectParameter("Factura_TipoMoneda", typeof(string));
    
            var factra_MontoTotalParameter = factra_MontoTotal.HasValue ?
                new ObjectParameter("Factra_MontoTotal", factra_MontoTotal) :
                new ObjectParameter("Factra_MontoTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregaFactura", factura_NitProveedorParameter, factura_NombreProveedorParameter, factura_CategoriaParameter, factura_FechaParameter, factura_TipoMonedaParameter, factra_MontoTotalParameter);
        }
    
        public virtual ObjectResult<spSelectFactura_Result> spSelectFactura()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectFactura_Result>("spSelectFactura");
        }
    }
}
